package account.models;

import javax.mail.PasswordAuthentication;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import java.sql.DriverManager;
import java.sql.ResultSet;

import com.mysql.jdbc.*;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;



public class PasswordReset {
	
	
	
	public boolean checkEmail(String username) {

		//To connect to the database
		String connectionURL = "jdbc:mysql://db4free.net:3306/account_system";
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		String dbUsername = "accountsystem";		//Database username
		String dbPassword = "accounts";				//Database password

		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (Exception e) {
			System.out.println(" Unable to load driver. ");
		}
		try {
			connection = (Connection) DriverManager.getConnection(
					connectionURL, dbUsername, dbPassword);
			System.out.println(" Connection Established. ");
			
			//After this, create your own logic
			PreparedStatement st = (PreparedStatement) connection.prepareStatement("SELECT username, password FROM Users WHERE username = ?");
			st.setString(1, username);
			rs = st.executeQuery();

			if (rs != null) {
				String user = "";
				String pass = "";
				
				while (rs.next()) {
					 user = rs.getString("username");
					 pass = rs.getString("password");
				}
				
				if(username.compareTo(user) == 0 ){
					
				 send(username,  
				            pass) ;
					
					return true;
			}
				}
		} catch (Exception e) {
			System.out.println(" Error connecting to database:  " + e);
		}
		return false;

		// username: accountsystem passoword: accounts
	}
	
	
    public void send(String recipeintEmail, 
            String password) 
            throws MessagingException, AddressException {
        /*
           It is a good practice to put this in a java.util.Properties 
           file and encrypt password. Scroll down 
           to comments below to see 
           how to use java.util.Properties in JSF context. 
        */
        String senderEmail = "famtreeservices@gmail.com";
        String senderMailPassword = "1234test";
        String gmail = "smtp.gmail.com";
         
        Properties props = System.getProperties();
 
        props.put("mail.smtp.user", senderEmail);
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "465");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.debug", "true");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.class", 
              "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.socketFactory.fallback", "false");
 
        // Required to avoid security exception.
        MyAuthenticator authentication = 
              new MyAuthenticator(senderEmail,senderMailPassword);
        Session session = 
              Session.getDefaultInstance(props,authentication);
        session.setDebug(true);
 
        MimeMessage message = new MimeMessage(session);
         
        BodyPart messageBodyPart = new MimeBodyPart();     
        
        String output = "Hello " + recipeintEmail + ",\n\n"  + 
        "You have requested your password for your Family Tree Account. The password" +
        " for your account is " + password + ". Thank you for using our services." +
        "\n \n \n\nFamily Tree Account Services" ;
        
        
        messageBodyPart.setText(output);
         
        // Add message text
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(messageBodyPart);
         
  

            
        message.setContent(multipart);                
        message.setSubject("Forgot Password");
        message.setFrom(new InternetAddress(senderEmail));
        message.addRecipient(Message.RecipientType.TO,
            new InternetAddress(recipeintEmail));
 
        Transport transport = session.getTransport("smtps");
        transport.connect(gmail,465, senderEmail, senderMailPassword);
        transport.sendMessage(message, message.getAllRecipients());
         
        transport.close();
         
    }
     
    private class MyAuthenticator extends javax.mail.Authenticator {
        String User;
        String Password;
        public  MyAuthenticator (String user, String password) {
            User = user;
            Password = password;
        }
         
        @Override
        public PasswordAuthentication getPasswordAuthentication() {
            return new javax.mail.PasswordAuthentication(User, Password);
        }
    }
		
		
	}
	
	


